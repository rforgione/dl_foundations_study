# AUTOGENERATED! DO NOT EDIT! File to edit: nbs/01_basic_network.ipynb (unless otherwise specified).

__all__ = ['basic_matmul', 'allclose', 'dot_prod_matmul', 'broadcast_mat_mul', 'matmul']

# Cell
from fastai.datasets import *
import pathlib
import gzip
import pickle
import torch

# Cell
def basic_matmul(a, b):
    assert a.shape[1] == b.shape[0]
    output = torch.zeros(a.shape[0], b.shape[1]).float()
    for i in range(a.shape[0]):
        for j in range(b.shape[1]):
            for k in range(a.shape[1]):
                output[i,j] += a[i,k] * b[k,j]
    return output

# Cell
def allclose(a, b, tol=1e-3): return torch.allclose(a, b, atol=1e-3)

# Cell
def dot_prod_matmul(a, b):
    assert a.shape[1] == b.shape[0]
    output = torch.zeros(a.shape[0], b.shape[1]).float()
    for i in range(a.shape[0]):
        for j in range(b.shape[1]):
            output[i,j] = (a[i,:] * b[:,j]).sum()
    return output

# Cell
def broadcast_mat_mul(a, b):
    assert a.shape[1] == b.shape[0]
    output = torch.zeros(a.shape[0], b.shape[1]).float()
    for i in range(a.shape[0]):
        # the unsqueeze makes it a column vector, so that the
        # pointwise multiplication happens across the columns of b.
        output[i] = (a[i].unsqueeze(-1) * b).sum(dim=0)
    return output

# Cell
def matmul(a, b):
    return torch.einsum('ik,kj->ij', a, b)